## Introduction
This is a fun project that:

1. Implements a script [euler.py](euler.py) for managing algo/math problems from [projecteuler](https://projecteuler.net/archives). The script is able to: 
    - download problem description and all necessary input files 
    - initialize directory structure for the problem with boilerplate solution
      files (see [templates](templates))
    - collect run statistics for a solution
    - query GPT (`gpt-3.5-turbo`) for auto-tagging of problems and for obtaining GPT solutions (see
      [solutions](#Solutions)
2. Collects all of my [solutions](#Solutions) to the problems.

## Dependencies
System:
- Python3
- python-pip
- Vim
- Brave
- pandoc
- wget

Python:
```bash
pip install -r requirements.txt
```

## GPT

GPT prompt used to obtain solutions
```
Solve the following problem in Python and make the
solution accessible via an argument-less function called
'solution'. The result returned by the 'solution' function
must be an integer value. Also the solution should be as
fast as possible. Here is the problem: {readme}
```

GPT prompt used to obtain tags
```
Create two tags. Each tag must consist of exactly one word
and be prefixed by a hash character. Separate the tags by
one space and never use a newline. These tags should describe
the nature of the following problem: {readme}
```

## Usage
Asumming euler.py is executable
```bash
chmod u+x euler.py
```
- to start solving a particular problem:
```bash
./euler.py solve 42
```
- to query GPT for a solution to a particular problem
```bash
./euler.py gpt 42
```
- to regenerate [solutions](#Solutions) table
```bash
./euler.py stats
```

## Solutions

Table explanation:
- `tags` are auto-generated by GPT (`gpt-3.5-turbo`)
- problem ID links to the problem dir (where a full problem description can be
  found) and corresponds to the ID from project euler
  [archive](https://projecteuler.net/archives)
- language columns (e.g. `py`) contain wall(cpu) time of the
  solution that they link to. All solutions were ran on
  `11th Gen Intel(R) Core(TM) i5-11400F @ 2.60GHz` 
- `gpt_py` are solutions generated by GPT (`gpt-3.5-turbo`)

{{ stats }}
