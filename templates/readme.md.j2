## Introduction
This is a fun project that:

1. Implements a script [euler.py](euler.py) for managing algo/math problems from [projecteuler](https://projecteuler.net/archives). The script is able to: 
    - download problem description and all necessary input files 
    - initialize directory structure for the problem with boilerplate solution
      files (see [templates](templates))
    - auto-tag problem using an LLM (e.g., \#Combinatorics \#BinomialCoefficient)
    - prompt an LLM to generate a solution
    - collect run statistics for my solutions and LLM solutions
2. Collects all of my [solutions](#Solutions) to the projecteuler problems.
3. Neatly presents all my, and LLM solutions in a markdown [table](#Solutions), including runtime statistics (cpu, wall time)

## Dependencies
System dependencies:
- Python3
- python-pip
- Vim
- Brave
- pandoc
- wget

Python dependencies:
```bash
pip install -r requirements.txt
```

## Environment
The following env variable should be exposed before running
```
OPENAI_API_KEY=somekey
OPENAI_ORG=someorg
```

## LLMs
LLMs in this project are utilize primarily to compare my solutions with
solutions generated by state-of-art LLMs. A.k.a to answer the question
whether my existence is still needed.

prompt used to obtain solutions
```
Solve the following problem in Python and make the
solution accessible via an argument-less function called
'solution'. The result returned by the 'solution' function
must be an integer value. The solution should be as
fast as possible. Do not output any other text in
your response other than the python code. Don't use
any third party libraries. Here is the problem: {readme}
```

prompt used to obtain tags
```
Create two tags. Each tag must consist of exactly one word
and be prefixed by a hash character. Separate the tags by
one space and never use a newline. These tags should describe
the nature of the following problem: {readme}
```

## Usage
Make sure all [dependencies](#Dependencies) are installed and
make the euler.py script executable:

```bash
chmod u+x euler.py
```
- to print help
```bash
./euler.py
```
- to start solving a particular problem:
```bash
./euler.py solve 42
```
- to prompt a LLM for a solution to a particular problem
```bash
./euler.py llm 42 gpt4
```
- to execute my python solution to a problem
```bash
./euler.py run 42 
```
- to execute llm solution to a problem
```bash
./euler.py run 42 gpt4
```
- to list available llms
```bash
./euler.py list-models
```
- to regenerate [solutions](#Solutions) table
```bash
./euler.py stats
```

## Solutions

Table explanation:
- `tags` are auto-generated by `gpt-3.5-turbo`
- problem ID links to the problem dir (where a full problem description can be
  found) and corresponds to the ID from project euler
  [archive](https://projecteuler.net/archives)
- solution columns (e.g. `py`) contain wall(cpu) time of the
  solution that they link to. All solutions were ran on
  `11th Gen Intel(R) Core(TM) i5-11400F @ 2.60GHz` 
- `{model}_py` are solutions generated by various LLMs (e.g., `gpt3_py`, `gpt4_py`)

{{ stats }}
