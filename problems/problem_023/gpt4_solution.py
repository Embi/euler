import json
import time

# START - CODE GENERATED BY gpt4
def solution():
    def get_proper_divisors_sum(n):
        total = 1
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                total += i
                if i != n // i:
                    total += n // i
        return total

    def is_abundant(n):
        return get_proper_divisors_sum(n) > n

    limit = 28123
    abundant_numbers = [i for i in range(12, limit + 1) if is_abundant(i)]
    can_be_written_as_abundant_sum = [False] * (limit + 1)

    for i in range(len(abundant_numbers)):
        for j in range(i, len(abundant_numbers)):
            sum_abundant = abundant_numbers[i] + abundant_numbers[j]
            if sum_abundant <= limit:
                can_be_written_as_abundant_sum[sum_abundant] = True
            else:
                break

    total_sum = sum(i for i in range(1, limit + 1) if not can_be_written_as_abundant_sum[i])
    return total_sum
# END - CODE GENERATED BY gpt4

cpu_s, wall_s = time.process_time(), time.time()
result = solution()
cpu_e, wall_e = time.process_time(), time.time()

cpu_time, wall_time = cpu_e - cpu_s, wall_e - wall_s
print(json.dumps({"solution": result, "cpu": cpu_time, "wall": wall_time}))
