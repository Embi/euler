import json
import time

# START - CODE GENERATED BY GPT
def solution():
    # Sieve of Eratosthenes to generate all primes below 1 million
    n = 1000000
    sieve = [True] * n
    for i in range(3, int(n**0.5)+1, 2):
        if sieve[i]:
            sieve[i*i::2*i] = [False] * ((n-i*i-1)//(2*i)+1)
    primes = [2] + [i for i in range(3, n, 2) if sieve[i]]

    max_count = 0
    max_prime = 0

    # Loop through all possible starting primes
    for i in range(len(primes)):
        count = 0
        total = 0
        # Loop through consecutive primes starting from i
        for j in range(i, len(primes)):
            total += primes[j]
            count += 1
            # If the sum is greater than 1 million, break out of loop
            if total > 1000000:
                break
            # If the sum is prime and the count is greater than previous max, update max
            elif sieve[total] and count > max_count:
                max_count = count
                max_prime = total

    return max_prime
# END - CODE GENERATED BY GPT

cpu_s, wall_s = time.process_time(), time.time()
result = solution()
cpu_e, wall_e = time.process_time(), time.time()

cpu_time, wall_time = cpu_e - cpu_s, wall_e - wall_s
print(json.dumps({"solution": result, "cpu": cpu_time, "wall": wall_time}))
