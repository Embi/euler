import json
import time

# START - CODE GENERATED BY GPT
def solution():
    def is_square(n):
        return int(n**0.5)**2 == n

    def continued_fraction_period(n):
        m, d, a = 0, 1, int(n**0.5)
        a0 = a
        period = 0
        while a != 2*a0:
            m = d*a - m
            d = (n - m*m) // d
            a = (a0 + m) // d
            period += 1
        return period

    result = 0
    max_x = 0

    for D in range(2, 1001):
        if is_square(D):
            continue
        period = continued_fraction_period(D)
        if period % 2 == 1:
            h1, h2 = 1, 0
            k1, k2 = 0, 1
            a0 = int(D**0.5)
            a = a0
            h = a
            k = 1
            n = 1
            while h*h - D*k*k != 1:
                h = a*h1 + h2
                k = a*k1 + k2
                a = (n - h*h) // k
                n = (D - h*h) // k
                h2, h1 = h1, h
                k2, k1 = k1, k
            if h > max_x:
                max_x = h
                result = D

    return result
# END - CODE GENERATED BY GPT

cpu_s, wall_s = time.process_time(), time.time()
result = solution()
cpu_e, wall_e = time.process_time(), time.time()

cpu_time, wall_time = cpu_e - cpu_s, wall_e - wall_s
print(json.dumps({"solution": result, "cpu": cpu_time, "wall": wall_time}))
