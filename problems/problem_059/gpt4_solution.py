import json
import time

# START - CODE GENERATED BY gpt4
def solution():
    # Read the encrypted ASCII codes from the file
    with open('p059_cipher.txt', 'r') as file:
        encrypted_codes = list(map(int, file.read().strip().split(',')))

    # Common English words to check for in the decrypted text
    common_words = ['the', 'and', 'to', 'of', 'in', 'that', 'is', 'it']

    # Function to decrypt the message with a given key
    def decrypt_with_key(key):
        decrypted_chars = []
        key_length = len(key)
        for i, code in enumerate(encrypted_codes):
            decrypted_char = code ^ key[i % key_length]
            decrypted_chars.append(decrypted_char)
        return decrypted_chars

    # Function to check if the decrypted message contains common English words
    def contains_common_words(decrypted_chars):
        decrypted_text = ''.join(chr(c) for c in decrypted_chars)
        return all(word in decrypted_text for word in common_words)

    # Try all possible keys (three lowercase letters)
    for a in range(ord('a'), ord('z') + 1):
        for b in range(ord('a'), ord('z') + 1):
            for c in range(ord('a'), ord('z') + 1):
                key = [a, b, c]
                decrypted_chars = decrypt_with_key(key)
                if contains_common_words(decrypted_chars):
                    return sum(decrypted_chars)

    return 0
# END - CODE GENERATED BY gpt4

cpu_s, wall_s = time.process_time(), time.time()
result = solution()
cpu_e, wall_e = time.process_time(), time.time()

cpu_time, wall_time = cpu_e - cpu_s, wall_e - wall_s
print(json.dumps({"solution": result, "cpu": cpu_time, "wall": wall_time}))
